#!/bin/bash

PP_PID=$$

PIDFILE="/tmp/piratepython.pid"
PYTHONPIDFILE="/tmp/piratepython.python.pid"

BOOT_LOG="/home/pirate/boot.log"

PYTHON_LOG="/home/pirate/python.log"
PYTHON_TTY="/dev/ttyGS0"
PYTHON_OUTPUT="$PYTHON_LOG $PYTHON_TTY"

PYTHON_PID=-1

GS0_MODE="debug"
GS1_MODE="terminal"

chown -R pirate:pirate /home/pirate
mount /boot

# Wait for /boot
while [ ! -f /boot/initrd ]; do sleep 1; done

# Wait for USB
while [ ! -d /sys/kernel/config/usb_gadget/g1 ]; do sleep 1; done

# Wait for TTY
while [ ! -c $PYTHON_TTY ]; do sleep 1; done

# Block multiple instances
if [ -f "$PIDFILE" ]; then
	PID=`cat $PIDFILE`
	kill -0 $PID
	RESULT=$?
	if [ $RESULT -eq 0 ]; then
		if [ "$1" == "stop" ]; then
			echo "Stopping existing PiratePython process! PID: $PID"
			PPID=`cat $PYTHONPIDFILE`
			kill -0 $PPID
			RESULT=$?
			if [ $RESULT -eq 0 ]; then
				echo "Stopping python child! PID: $PID"
				kill $PPID
			fi
			rm -f $PIDFILE
			rm -f $PYTHONPIDFILE
			kill $PID
			exit $?
		else
			echo "Existing PiratePython process running? PID: $PID"
			exit 1
		fi
	fi
	rm -f $PIDFILE
	rm -rf $PYTHONPIDFILE
fi

if [ "$1" == "stop" ]; then
	echo "No existing PiratePython process found!"
	exit 0
fi

# Re-acquire existing Python PID
if [ -f "$PYTHONPIDFILE" ]; then
	PPID=`cat $PYTHONPIDFILE`
	kill -0 $PPID
	RESULT=$?
	if [ $RESULT -eq 0 ]; then
		PYTHON_PID="$PPID"
	else
		rm -f $PYTHONPIDFILE
	fi
fi

echo "$PP_PID" > $PIDFILE

function wait_for_change {
	while read -r action; do
                echo $action
		if [ -f /tmp/_main.py ]; then
			# Compare /boot/main.py to cached version, and update if needed
			diff /tmp/_main.py /tmp/main.py > /dev/null 2>&1
			if [ $? -eq 1 ]; then
				mv /tmp/_main.py /tmp/main.py
				launch_script
			fi
		fi

		# Compare wpa_supplicant.conf to cached version, and update if needed
		if [ -f /tmp/wpa_supplicant.conf ]; then
			diff /tmp/wpa_supplicant.conf /etc/wpa_supplicant/wpa_supplicant-wlan0.conf > /dev/null 2>&1
			if [ $? -eq 1 ]; then
				cp /tmp/wpa_supplicant.conf /etc/wpa_supplicant/wpa_supplicant-wlan0.conf
				systemctl restart wpa_supplicant@wlan0
			fi
		fi

		sleep 0.1
	done < <(PYTHONUNBUFFERED=1 /usr/bin/python3 /sbin/piratepython-sync)
}

function launch_script {
	echo "Relaunching /boot/main.py"

	if [ -f "$PYTHON_LOG" ]; then
		rm -f $PYTHON_LOG
		touch $PYTHON_LOG
	fi

	if [ ! $PYTHON_PID -eq -1 ]; then
		/bin/kill $PYTHON_PID
	fi

	PYTHON_OUTPUT="$PYTHON_LOG $PYTHON_TTY"
	timeout 0.1 bash -c "echo \"---------- Restarting main.py ----------\" > $PYTHON_TTY"
	RESULT=$?
	echo "Result: $RESULT"
	if [ $RESULT -eq 124 ]; then
		echo "Timeout on $PYTHON_TTY, using logfile"
		echo "Timeout on $PYTHON_TTY" > $PYTHON_LOG
		echo "---------- Restarting main.py ----------" > $PYTHON_LOG
		# ttyGS0 has timed out!
		PYTHON_OUTPUT="$PYTHON_LOG"
	fi
	PYTHONPATH=/boot/libraries PYTHONUNBUFFERED=1 /usr/bin/python3 /tmp/main.py > >( tee -a $PYTHON_OUTPUT > /dev/null 2>&1 ) 2>&1 &
	PYTHON_PID=$!
	echo "$PYTHON_PID" > $PYTHONPIDFILE
}

BOOT_OUTPUT="$BOOT_LOG $PYTHON_TTY"

# Check to see if ttyGS0 is functional
timeout 0.1 bash -c "echo \"Serial debug enabled!\" > $PYTHON_TTY"
RESULT=$?
echo "Result: $RESULT"
if [ $RESULT -eq 124 ]; then
	echo "Timeout on $PYTHON_TTY, using logfile"
	echo "Timeout on $PYTHON_TTY" >> $BOOT_LOG
	# ttyGS0 has timed out!
	BOOT_OUTPUT="$BOOT_LOG"
fi

# Copy the localtime file if it exists
if [ -f /boot/localtime ]; then
	cp /boot/localtime /etc/localtime
	echo "Using /boot/localtime, time: $(date)" | tee -a $BOOT_OUTPUT
fi

if [ -f /boot/wpa_supplicant.conf ]; then
	cp /boot/wpa_supplicant.conf /etc/wpa_supplicant/wpa_supplicant-wlan0.conf
	systemctl restart wpa_supplicant@wlan0
fi

# Check for, and run boot.sh
if [ -f /boot/boot.sh ]; then
	bash /boot/boot.sh 2>&1 | tee -a $BOOT_OUTPUT
fi

# Check for, and run boot.py
if [ -f /boot/boot.py ]; then
	PYTHONPATH=/boot/libraries PYTHONUNBUFFERED=1 /usr/bin/python3 /boot/boot.py 2>&1 | tee -a $BOOT_OUTPUT
fi

# Writing to /boot is a nono!
#mount -o,remount,rw /boot
#cp $BOOT_LOG /boot/boot.log
#mount -o,remount,ro /boot

if [ -f /boot/main.py ]; then
	cp /boot/main.py /tmp/main.py
	launch_script
fi

wait_for_change
